cb <- 10
cb
2+2
# Pregunta 1.
library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = `Life Exp`, asesinatos = Murder,universitarios = `HS Grad`, heladas = Frost, area = Area, .data = datos)
datos <- mutate(.data = datos, densidad_pobl = habitantes * 1000 / area)
datos
# a)	Analizar la relación entre variables
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"))
,
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
corrplot(x, type="upper", order="hclust")
library(corrplot)
x <- cor(datos[,1:4])
corrplot(x, type="upper", order="hclust")
install.packages('corrplot')
library(corrplot)
x <- cor(datos[,1:4])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:5])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:6])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:7])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:9])
corrplot(x, type="upper", order="hclust")
View(datos)
# b)	Generar un modelo de regresión lineal con todas las variables (hacer un summary y analizar)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo + asesinatos + universitarios + heladas + area + densidad_pobl, data = datos )
summary(modelo)
# b)	Generar un modelo de regresión lineal con todas las variables (hacer un summary y analizar)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area + densidad_pobl,
data = datos )
summary(modelo)
# c)	Selección de los mejores predictores (hacer un summary y analizar)
step(object = modelo, direction = "both", trace = 1)
mejormodelo <- (lm(formula = esp_vida ~ habitantes + asesinatos + universitarios + heladas, data = datos))
summary(mejormodelo)
library(ggplot2)
library(gridExtra)
install.packages('gridExtra')
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
plotHabitantes <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotAsesinatos <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotUniversitarios <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotHeladas <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plotHabitantes, plotAsesinatos, plotUniversitarios, plotHeladas)
qqnorm(modelo$residuals)
qqline(modelo$residuals)
shapiro.test(modelo$residuals)
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point() +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point() +
geom_smooth(se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
library(car)
install.packages('car')
install.packages('car')
install.packages("car")
library(car)
vif(modelo)
vif(mejormodelo)
grupoAntes       <- c( 2, 4, 6, 1, 3 )
grupoDespues     <- c( 5, 2, 7, 1, 6 )
diferencias <- c(grupoAntes - grupoDespues)
rbind(grupoAntes, grupoDespues, diferencias)
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosdiferencias[4])
rangosDeDiferencias <- rank(abs(diferencias[diferencias != 0]))
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosDeDiferencias[4])
rangosDeDiferencias
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrametabla[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
grupoAntes       <- c( 2, 4, 6, 1, 3 )
grupoDespues     <- c( 5, 2, 7, 1, 6 )
diferencias <- c(grupoAntes - grupoDespues)
rbind(grupoAntes, grupoDespues, diferencias)
rangosDeDiferencias <- rank(abs(diferencias[diferencias != 0]))
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosDeDiferencias[4])
rangosDeDiferencias
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
DataFrame <-  data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues,
signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
wilcox.test(x = grupoAntes, y = grupoDespues,
alternative = "two.sided", mu = 0, paired = TRUE)
wilcox.test(x = grupoAntes, y = grupoDespues,
alternative = "two.sided", mu = 0, paired = TRUE)
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
estadisticoW <- min(c( positivos, negativos ))
estadisticoW
require(coin)
library(coin)
data <- data.frame(grupoAntes = grupoAntes,grupoDespues = grupoDespues)
wilcoxsign_test(grupoAntes ~ grupoDespues, data = data, distribution = "exact")
# Pregunta 1.
library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = `Life Exp`, asesinatos = Murder,universitarios = `HS Grad`, heladas = Frost, area = Area, .data = datos)
datos <- mutate(.data = datos, densidad_pobl = habitantes * 1000 / area)
datos
# a)	Analizar la relación entre variables
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
library(corrplot)
x <- cor(datos[,1:9])
corrplot(x, type="upper", order="hclust")
library("rjson")
library("rjson")
json <- fromJSON(file="1255.json")
blancura <- as.data.frame(json)
print(blancura)
setwd("C:/Users/rserdan/Desktop/MCD/II. 07 Análisis Estadístico II/Practicas/Practica 1")
library("rjson")
json <- fromJSON(file="1255.json")
blancura <- as.data.frame(json)
print(blancura)
library(GGally)
ggpairs(blancura, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
library(corrplot)
x <- cor(blancura[,2:5])
corrplot(x, type="upper", order="hclust")
library("rjson")
json <- fromJSON(file="1214.json")
evaluaciones <- as.data.frame(json)
print(evaluaciones)
library(GGally)
ggpairs(evaluaciones, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
#install.packages('corrplot')
library(corrplot)
x <- cor(evaluaciones[,1:5])
corrplot(x, type="upper", order="hclust")
x <- cor(blancura[,2:7])
corrplot(x, type="upper", order="hclust")
fit<-lm(blancura$blancura~blancura$acido+blancura$cascada+blancura$agua
+blancura$sulfuro+blancura$cloro+blancura$tela)
fit
summary(fit)
#install.packages('corrplot')
library(corrplot)
x <- cor(blancura[,1:7])
corrplot(x, type="upper", order="hclust")
confint(fit)
predict(fit,data.frame(lstat=(c(5,4))),interval="confidence")
predict(fit,data.frame(lstat=(c(5,4))),interval="prediction")
install.packages("BSDA")
library(BSDA)
horas<-c(1.5,2.2,0.9,1.3,2,1.6,1.8,1.5,2,1.2,1.7)
auto<-c(9,12,18,14,12,14,12,10,16,11,9,11,13,11,13,15,13,14)
SIGN.test(auto,md=12, alternative="two.sided", conf.level = 0.98)
library(MASS)
horas<-c(1.5,2.2,0.9,1.3,2,1.6,1.8,1.5,2,1.2,1.7)
wilcox.test(horas,mu=1.8,exact = T,alternative = "t",conf.int = 0.95)
install.packages("exactRankTests")
library(exactRankTests)
wilcox.exact(horas,mu=1.8,exact = T,alternative = "t",conf.int = 0.95)
#ejemplo 16.4
conproblem<-c(531,621,663,579,451,660,591,719,543,575)
sinproblem<-c(509,540,688,502,424,683,568,748,530,524)
wilcox.test(conproblem,sinproblem,mu=50,paired=T,exact = T,alternative = "l",conf.int = 0.95)
##ejemplo 16.1  prueba de rangos de signo de Wilcoxon
library(MASS)
horas<-c(1.5,2.2,0.9,1.3,2.0,1.6,1.8,1.5,2.0,1.2,1.7)
wilcox.test(horas,mu=1.8,exact=T,alternative="t", conf.int=0.95)
install.packages("exactRankTests")
install.packages("exactRankTests")
library(exactRankTests)
wilcox.exact(horas,mu=1.8,exact=T,alternative="t", conf.int=0.95)
conproblem<-c(531,621,663,579,451,660,591,719,543,575)
sinproblem<-c(509,540,688,502,424,683,568,748,530,524)
wilcox.test(conproblem,sinproblem,mu=50,paired=T,exact=T,alternative="l",conf.int=0.95)
campo<-c(14.8,10.6,7.3,12.5,5.6,12.9,6.3,16.1,9.0,11.4,4.2,2.7)
ciudad<-c(12.7,16.9,7.6,2.4,6.2,9.9,14.2,7.9,11.3,6.4,6.1,10.6,12.6,16.0,8.3,9.1,15.3,
14.8,2.1,10.6,6.7,6.7,10.6,5.0,17.7,5.6,3.6,18.6,1.8,2.6,11.8,5.6,1.0,3.2,5.9,4.0)
wilcox.test(campo,ciudad,alternative="greater",paried=FALSE)
####prueba de kruskal - Wallis
s1<-c(24,16.7,22.8,19.8)
s2<-c(23.2,19.8,18.1,17.6,20.2,17.8)
s3<-c(18.4,19.1,17.3,17.3,19.7,18.9,18.8,19.3)
kruskal.test(list(s1,s2,s3))
library(BSDA)
horas<-c(1.5,2.2,0.9,1.3,2,1.6,1.8,1.5,2,1.2,1.7)
auto<-c(9,12,18,14,12,14,12,10,16,11,9,11,13,11,13,15,13,14)
SIGN.test(auto,md=12, alternative="two.sided", conf.level = 0.98)
