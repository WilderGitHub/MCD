cb <- 10
cb
2+2
# Pregunta 1.
library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = `Life Exp`, asesinatos = Murder,universitarios = `HS Grad`, heladas = Frost, area = Area, .data = datos)
datos <- mutate(.data = datos, densidad_pobl = habitantes * 1000 / area)
datos
# a)	Analizar la relación entre variables
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"))
,
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
corrplot(x, type="upper", order="hclust")
library(corrplot)
x <- cor(datos[,1:4])
corrplot(x, type="upper", order="hclust")
install.packages('corrplot')
library(corrplot)
x <- cor(datos[,1:4])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:5])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:6])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:7])
corrplot(x, type="upper", order="hclust")
x <- cor(datos[,1:9])
corrplot(x, type="upper", order="hclust")
View(datos)
# b)	Generar un modelo de regresión lineal con todas las variables (hacer un summary y analizar)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo + asesinatos + universitarios + heladas + area + densidad_pobl, data = datos )
summary(modelo)
# b)	Generar un modelo de regresión lineal con todas las variables (hacer un summary y analizar)
modelo <- lm(esp_vida ~ habitantes + ingresos + analfabetismo +
asesinatos + universitarios + heladas + area + densidad_pobl,
data = datos )
summary(modelo)
# c)	Selección de los mejores predictores (hacer un summary y analizar)
step(object = modelo, direction = "both", trace = 1)
mejormodelo <- (lm(formula = esp_vida ~ habitantes + asesinatos + universitarios + heladas, data = datos))
summary(mejormodelo)
library(ggplot2)
library(gridExtra)
install.packages('gridExtra')
library(gridExtra)
plot1 <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot2 <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot3 <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plot4 <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plot1, plot2, plot3, plot4)
plotHabitantes <- ggplot(data = datos, aes(habitantes, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotAsesinatos <- ggplot(data = datos, aes(asesinatos, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotUniversitarios <- ggplot(data = datos, aes(universitarios, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
plotHeladas <- ggplot(data = datos, aes(heladas, modelo$residuals)) +
geom_point() + geom_smooth(color = "firebrick") + geom_hline(yintercept = 0) +
theme_bw()
grid.arrange(plotHabitantes, plotAsesinatos, plotUniversitarios, plotHeladas)
qqnorm(modelo$residuals)
qqline(modelo$residuals)
shapiro.test(modelo$residuals)
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point() +
geom_smooth(color = "firebrick", se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = datos, aes(modelo$fitted.values, modelo$residuals)) +
geom_point() +
geom_smooth(se = FALSE) +
geom_hline(yintercept = 0) +
theme_bw()
library(car)
install.packages('car')
install.packages('car')
install.packages("car")
library(car)
vif(modelo)
vif(mejormodelo)
grupoAntes       <- c( 2, 4, 6, 1, 3 )
grupoDespues     <- c( 5, 2, 7, 1, 6 )
diferencias <- c(grupoAntes - grupoDespues)
rbind(grupoAntes, grupoDespues, diferencias)
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosdiferencias[4])
rangosDeDiferencias <- rank(abs(diferencias[diferencias != 0]))
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosDeDiferencias[4])
rangosDeDiferencias
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrametabla[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
grupoAntes       <- c( 2, 4, 6, 1, 3 )
grupoDespues     <- c( 5, 2, 7, 1, 6 )
diferencias <- c(grupoAntes - grupoDespues)
rbind(grupoAntes, grupoDespues, diferencias)
rangosDeDiferencias <- rank(abs(diferencias[diferencias != 0]))
rangosDeDiferencias <- c(rangosDeDiferencias[1:3], 0, rangosDeDiferencias[4])
rangosDeDiferencias
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
DataFrame <- data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues, signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
DataFrame <-  data.frame(grupoAntes = grupoAntes, grupoDespues = grupoDespues,
signo = sign(diferencias),
diferencia = abs(diferencias), rangos = rangosDeDiferencias)
DataFrame
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
W <- min(c( positivos, negativos ))
W
wilcox.test(x = grupoAntes, y = grupoDespues, alternative = "two.sided", mu = 0, paired = TRUE)
wilcox.test(x = grupoAntes, y = grupoDespues,
alternative = "two.sided", mu = 0, paired = TRUE)
wilcox.test(x = grupoAntes, y = grupoDespues,
alternative = "two.sided", mu = 0, paired = TRUE)
positivos <- sum(DataFrame[DataFrame$signo == 1,"rangos"])
negativos <- sum(DataFrame[ DataFrame$signo == -1,"rangos"] )
estadisticoW <- min(c( positivos, negativos ))
estadisticoW
require(coin)
library(coin)
data <- data.frame(grupoAntes = grupoAntes,grupoDespues = grupoDespues)
wilcoxsign_test(grupoAntes ~ grupoDespues, data = data, distribution = "exact")
# Pregunta 1.
library(dplyr)
datos <- as.data.frame(state.x77)
datos <- rename(habitantes = Population, analfabetismo = Illiteracy,
ingresos = Income, esp_vida = `Life Exp`, asesinatos = Murder,universitarios = `HS Grad`, heladas = Frost, area = Area, .data = datos)
datos <- mutate(.data = datos, densidad_pobl = habitantes * 1000 / area)
datos
# a)	Analizar la relación entre variables
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
library(corrplot)
x <- cor(datos[,1:9])
corrplot(x, type="upper", order="hclust")
library (readxl)
library(corrplot)
library(PerformanceAnalytics)
library(psych)
library(rela)
library(factoextra)
localidades<-read_excel("localidades.xlsx")
head(localidades)
setwd("C:/Users/rserdan/Desktop/MCD/II. 07 Análisis Estadístico II/Practicas/Practica 3")
localidades<-read_excel("localidades.xlsx")
head(localidades)
str(localidades)
summary(localidades)
localidades<-read_excel("localidades.xlsx")
head(localidades)
summary(localidades)
missing(localidades)
localidades2=localidades[c(2:6)]
cor(localidades2)
cor(localidades2)
plot(localidades)
hist(localidades)
hist(localidades[,2:5])
hist(localidades$desempleo)
l<-hist(localidades$desempleo)
s<-hist(localidades$salario)
i<-hist(localidades$inflacion)
a<-hist(localidades$activos)
r<-hist(localidades$remesas)
grid.arrange(l,s,i,a,r)
grid.arrange(l,s,i,a,r)
l <-  ggplot(localidades, aes(x = x)) +                           # Draw density above histogram
geom_histogram(aes(y = ..density..)) +
geom_density(alpha = 0.1, fill = "red")
l
l <-  ggplot(localidades, aes(x = localidades$salario)) +                           # Draw density above histogram
geom_histogram(aes(y = ..density..)) +
geom_density(alpha = 0.1, fill = "red")
l
s<-hist(localidades$salario)
l
l <-  ggplot(localidades$salario, aes(x = x)) +                           # Draw density above histogram
geom_histogram(aes(y = ..density..)) +
geom_density(alpha = 0.1, fill = "red")
l
s<-hist(localidades$salario)
l <-  ggplot(localidades$salario, aes(x = x)) +                           # Draw density above histogram
geom_histogram(aes(y = ..density..)) +
geom_density(alpha = 0.1, fill = "red")
l
s<-hist(localidades$salario)
i<-hist(localidades$inflacion)
a<-hist(localidades$activos)
r<-hist(localidades$remesas)
i<-hist(localidades$inflacion)
l <-  ggplot(localidades$inflacion, aes(x = x)) +                           # Draw density above histogram
geom_histogram(aes(y = ..density..)) +
geom_density(alpha = 0.1, fill = "red")
l
p7 <- ggplot(localidades, aes(x = salario)) +
geom_histogram()
p7
s<-hist(localidades$salario)
i<-hist(localidades$inflacion)
p7 <- ggplot(localidades, aes(x = inflacion)) +
geom_histogram()
p7
i<-hist(localidades$inflacion)
p7
i<-hist(localidades$inflacion)
d <- ggplot(localidades, aes(x = desempleo)) +
geom_histogram()
s <- ggplot(localidades, aes(x = salario)) +
geom_histogram()
i <- ggplot(localidades, aes(x = inflacion)) +
geom_histogram()
a <- ggplot(localidades, aes(x = activos)) +
geom_histogram()
r <- ggplot(localidades, aes(x = remesas)) +
geom_histogram()
grid.arrange(d,s,i,a,r)
d <- ggplot(localidades, aes(x = desempleo)) +
geom_histogram()
d
d <- ggplot(localidades, aes(x = desempleo)) +
geom_histogram()
s <- ggplot(localidades, aes(x = salario)) +
geom_histogram()
i <- ggplot(localidades, aes(x = inflacion)) +
geom_histogram()
a <- ggplot(localidades, aes(x = activos)) +
geom_histogram()
r <- ggplot(localidades, aes(x = remesas)) +
geom_histogram()
grid.arrange(d,s,i,a,r)
library(ggplot2)
grid.arrange(d,s,i,a,r)
library(gridExtra)
grid.arrange(d,s,i,a,r)
plot(localidades)
library(GGally)
ggpairs(datos, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
library(GGally)
ggpairs(localidades, lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
ggpairs(localidades[,2:6], lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
corrplot(cor(localidades2))
corrplot(cor(localidades2))
cortest(cor(localidades2))
cortest.bartlett(cor(localidades2),n=850)
cortest.bartlett(cor(localidades2),n=850)
# test KMO
KMO(localidades2)
scree(localidades2)
fa.parallel(localidades2,fa="pc")
comp_localidades<-prcomp(localidades2, scale=TRUE,center = TRUE)
comp_localidades
summary(comp_localidades)
localidadesA <- localidades[,2:5]
pca <- prcomp(localidadesA, scale = TRUE)
fviz_eig(pca)
plot(comp_localidades)
fviz_pca_ind(pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
localidadesA <- localidades[,2:5]
pca <- prcomp(localidadesA, scale = TRUE)
fviz_eig(pca)
plot(comp_localidades)
localidadesA <- localidades[,2:5]
pca <- prcomp(localidadesA, scale = TRUE)
fviz_eig(pca)
plot(comp_localidades)
plot(comp_localidades)
fviz_pca_ind(pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
biplot(comp_localidades, scale=0.5)
comp_principal<-comp_localidades$x
comp_principal<-comp_principal[,1:3]
head(comp_principal)
data(iris)
setwd("C:/Users/rserdan/Desktop/MCD/II. 07 Análisis Estadístico II/Practicas/Practica 4")
data(iris)
datos<-iris
View(datos)
head(datos)
#
datos[,1:4]<-scale(datos[,1:4])
View(datos)
head(datos)
#
datos[,1:4]<-scale(datos[,1:4])
head(datos)
data(iris)
datos<-iris
head(datos)
#
datos[,1:4]<-scale(datos[,1:4])
head(datos)
##
distancias<-dist(datos[,1:4])
distancias
##agrupamiento
agrupamiento<-hclust(distancias)
## k grupos
(grupos<-cutree(agrupamiento, k=3))
###
plot(agrupamiento,hang=-1,cex=0.7, labels=datos[,5], main="Cluster
sobre tipos de flor")
##
rect.hclust(agrupamiento, k=3, border="red")
############## Ejercicio 1 ########
###### Cluster  #########
install.packages("readxl")
install.packages("readxl")
library (readxl)
exportaciones<-read_excel("exportaciones.xlsx")
head(exportaciones)
summary(exportacioness)
summary(exportaciones)
exportaciones[,2:5]<-scale(exportaciones[,2:5])
head(exportaciones)
##
distancias<-dist(exportaciones[,2:5])
distancias
##agrupamiento
agrupamiento<-hclust(distancias)
## k grupos
(grupos<-cutree(agrupamiento, k=3))
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones[,5], main="Cluster
sobre tipos de flor")
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones[,1], main="Cluster
sobre tipos de flor")
##
rect.hclust(agrupamiento, k=3, border="red")
exportaciones[,2:5]<-scale(exportaciones[,2:5])
head(exportaciones)
##
distancias<-dist(exportaciones[,2:5])
distancias
##agrupamiento
agrupamiento<-hclust(distancias)
## k grupos
(grupos<-cutree(agrupamiento, k=3))
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones[,1], main="Cluster
sobre tipos de flor")
exportaciones[,1]
exportaciones[,1]<-as.factor(exportaciones[,1])
library (readxl)
exportaciones<-read_excel("exportaciones.xlsx")
head(exportaciones)
summary(exportaciones)
summary(exportaciones)
exportaciones$pais<-as.factor(exportaciones$pais)
exportaciones[,2:5]<-scale(exportaciones[,2:5])
head(exportaciones)
##
distancias<-dist(exportaciones[,2:5])
distancias
##agrupamiento
agrupamiento<-hclust(distancias)
## k grupos
(grupos<-cutree(agrupamiento, k=3))
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones[,1], main="Cluster
sobre tipos de flor")
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
sobre tipos de flor")
##
rect.hclust(agrupamiento, k=3, border="red")
pc <- prcomp(exportaciones, scale = TRUE)
pc <- prcomp(exportaciones[, 2:5], scale = TRUE)
pc <- predict(pc)[, 1:2]
gsa.cl <- hcl.colors(3, "Dark 3")[cluster3]
gsa.cl <- hcl.colors(3, "Dark 3")[exportaciones]
train <- exportaciones[, which(names(exportaciones) != "pais")]
w <- kmeans(x=train, centers=3)
w
library(useful)
install.packages("useful")
library(useful)
plot(w, data=train)
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
sobre tipos de flor")
##
rect.hclust(agrupamiento, k=3, border="red")
train <- exportaciones[, which(names(exportaciones) != "pais")]
set.seed(278613)
w <- kmeans(x=train, centers=3)
w
plot(w, data=train)
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
sobre tipos de flor")
##
rect.hclust(agrupamiento, k=3, border="red")
train <- exportaciones[, which(names(exportaciones) != "pais")]
w <- kmeans(x=train, centers=43)
w <- kmeans(x=train, centers=4)
w
plot(w, data=train)
set.seed(123)
w <- kmeans(x=train, centers=3)
w
plot(w, data=train)
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
de exportaciones por País destinor")
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
de exportaciones por País destino")
rect.hclust(agrupamiento, k=3, border="red")
# grafico kmeans
train <- exportaciones[, which(names(exportaciones) != "pais")]
exportaciones<-read_excel("exportaciones.xlsx")
head(exportaciones)
summary(exportaciones)
exportaciones$pais<-as.factor(exportaciones$pais)
exportaciones<-read_excel("exportaciones.xlsx")
head(exportaciones)
summary(exportaciones)
library(GGally)
ggpairs(localidades[,2:6], lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
ggpairs(exportaciones[,2:6], lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
ggpairs(exportaciones[,2:5], lower = list(continuous = "smooth"),
diag = list(continuous = "bar"), axisLabels = "none")
exportaciones[,2:5]<-scale(exportaciones[,2:5])
head(exportaciones)
##
distancias<-dist(exportaciones[,2:5])
distancias
##agrupamiento
agrupamiento<-hclust(distancias)
## k grupos
(grupos<-cutree(agrupamiento, k=3))
###
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
de exportaciones por País destino")
rect.hclust(agrupamiento, k=3, border="red")
train <- exportaciones[, which(names(exportaciones) != "pais")]
set.seed(123)
w <- kmeans(x=train, centers=3)
w
plot(w, data=train)
plot(agrupamiento,hang=-1,cex=0.7, labels=exportaciones$pais, main="Cluster
de exportaciones por País destino")
rect.hclust(agrupamiento, k=3, border="red")
